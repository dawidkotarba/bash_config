### EXPORTS ###
export TERM='xterm-256color'

### DIRS ###
BASH_CONFIG_PATH=~/bash_config
source $BASH_CONFIG_PATH/dirs

### aliases ###
alias ll='ls -alh'
alias h='history'
alias j='jobs -l'
alias du='du -h'

# apps aliases
alias r='ranger'
alias ranger='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'
alias g='glances'
alias st='tig status'

### Functions ###
__git_add_commit_folder(){
 local folder_name=$1
 git -C $folder_name commit -a -m "update"
}

__source_if_exists(){
 local file=$1
 if [ -f $file ]
  then
   source $file
   __echo_ok "Sourced $file"
  else
   __echo_err "Cannot source $file"
 fi
}

# echo
__echo_err(){
 local color=`tput setaf 1`
 local reset=`tput sgr0`
 echo "${color}$@${reset}"
}

__echo_ok(){
 local color=`tput setaf 2`
 local reset=`tput sgr0`
 echo "${color}$@${reset}"
}

__echo_warn(){
 local color=`tput setaf 11`
 local reset=`tput sgr0`
 echo "${color}$@${reset}"
}

kk-bashcreatemodule(){
 local module_name=$1
 local module_path=$BASH_MODULES_PATH/$module_name

 if [[ ! -d $module_name ]]
  then mkdir $BASH_MODULES_PATH/$module_name
 fi
 echo "### $module_name ###" > $module_path/aliases
}

# Edits "aliases" file from provided module.
# If no module is specified, then edits a root "aliases" file.
kk-bashedit(){
 local module_name=$1

 if [[ $module_name ]]
  then atom $BASH_MODULES_PATH/$module_name/aliases
  else atom $BASH_ALIASES_PATH
 fi
}

kk-bashshow(){
 less $BASH_ALIASES_PATH
}

kk-bashcommit(){
 __git_add_commit_folder $BASH_CONFIG_PATH
}

kk-bashpush(){
 git -C $BASH_CONFIG_PATH push
}

kk-bashcommitpush(){
  kk-bashcommit
  kk-bashpush
}

kk-bashrevert(){
  git -C $BASH_CONFIG_PATH checkout -f
}

kk-bak(){
 local date=`date | awk '{print $3"-"$2"-"$4}'`
 cp -r $1 @$1_$date
}
alias bak='kk-bak'

kk-killall(){
  local process_name=$1
  ps aux | grep $process_name | awk '{print $2}' | xargs kill
}
alias killall='kk-killall'

kk-notescommit(){
  __git_add_commit_folder $NOTES_PATH
}

k(){
  __echo_ok "refreshing..."
  exec bash
}

### DOCKER ###

# Starts a docker container with provided name
kk-dockerstart(){
  local container_name=$1
  echo "Starting docker container: $1"
  sudo docker start $container_name
  kk-dockerip $container_name
}

# Prints ip of provided docker container
kk-dockerip(){
  local container_name=$1
  sudo docker inspect $container_name | grep '"IPAddress"' | tail -n1
}

### GIT ###

# Finds parents of current branch
kk-gitparent(){
 current_branch=`git rev-parse --abbrev-ref HEAD`
 git show-branch -a | ag '\*' | ag -v "$current_branch" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//'
}

# Creates a diff file from commits with provided pattern
kk-gitmakediff(){
 local diff_file_path=~/diff
 for commit in "$@"
  do
   git show $commit >> $diff_file_path
  done
}

# Creates local branches for all found remote branches with provided pattern
kk-gitbranch(){
  local pattern=$1;
  local remote_branch_names=`git br -r | grep $pattern | awk '{print $1}'`

  for remote_branch_name in $remote_branch_names
   do
    local local_branch_name=`echo $remote_branch_name | sed -r 's/^.{7}//'`
    echo "Doing: git checkout -b $local_branch_name $remote_branch_name"
    `git checkout -b $local_branch_name $remote_branch_name`
   done
}

# Deletes all local branches except develop
kk-gitdeletebranches(){
  `git checkout develop && git branch | grep -v develop | awk '{print $1}' | grep -v '*' | xargs git branch -D`
}

kk-gitdifftask(){
  local pattern=$1
  local commits=$(git llog | grep Kotarba | grep $pattern | awk '{print $1}')
  local cmd="kk-gitmakediff $commits"
  echo kk-gitmakediff $commits
}

### NAVIGATE ###
kk-navigaterepo(){
  cd $REPOSITORY_PATH
}

### APPS ###
restclient(){
 (cd /usr/bin && java -jar restclient.jar &)
}

### OPENCONNECT VPN ###
__openconnect_vpn(){
 local user=$1
 local vpn_url=$2
 local params=$3
 sudo openconnect -u $user $vpn_url $params
}

__openconnect_vpn_kill_signal(){
  local signal=$1
  local pattern=$2
  local PS=`ps aux | grep "sudo openconnect" | grep $pattern | awk '{print $2}' | head -1`
  if [[ $PS ]]
   then
    __echo_ok "$signal for VPN: $pattern"
    sudo kill -$signal $PS
   else __echo_err "Not connected to VPN: $pattern"
  fi
}

### SOURCE MODULES ###
__source_modules_aliases(){
 local aliases_files=`find $BASH_MODULES_PATH -type f -name aliases`
 for i in $aliases_files
  do __source_if_exists $i
 done
}

__source_modules_aliases

### AUTOSTART ###
source $BASH_SCRIPTS_PATH/autostart.sh

### PROGRAMS ###
# z -> https://github.com/rupa/z.git
source $BASH_APPS_PATH/z/z.sh

# liquidprompt -> https://github.com/nojhan/liquidprompt.git
[[ $- = *i* ]] && source $BASH_APPS_PATH/liquidprompt/liquidprompt

# the fuck -> https://github.com/nvbn/thefuck
eval "$(thefuck --alias f)"
